console.log("index");
var SSD1306_LCDWIDTH = 128;
var SSD1306_LCDHEIGHT = 64;

var SSD1306_SETCONTRAST = 0x81;
var SSD1306_DISPLAYALLON_RESUME = 0xA4;
var SSD1306_DISPLAYALLON = 0xA5;
var SSD1306_NORMALDISPLAY = 0xA6;
var SSD1306_INVERTDISPLAY = 0xA7;
var SSD1306_DISPLAYOFF = 0xAE;
var SSD1306_DISPLAYON = 0xAF;

var SSD1306_SETDISPLAYOFFSET = 0xD3;
var SSD1306_SETCOMPINS = 0xDA;

var SSD1306_SETVCOMDETECT = 0xDB;

var SSD1306_SETDISPLAYCLOCKDIV = 0xD5;
var SSD1306_SETPRECHARGE = 0xD9;

var SSD1306_SETMULTIPLEX = 0xA8;

var SSD1306_SETLOWCOLUMN = 0x00;
var SSD1306_SETHIGHCOLUMN = 0x10;

var SSD1306_SETSTARTLINE = 0x40;

var SSD1306_MEMORYMODE = 0x20;
var SSD1306_COLUMNADDR = 0x21;
var SSD1306_PAGEADDR   = 0x22;

var SSD1306_COMSCANINC = 0xC0;
var SSD1306_COMSCANDEC = 0xC8;

var SSD1306_SEGREMAP = 0xA0;

var SSD1306_CHARGEPUMP = 0x8D;

var SSD1306_EXTERNALVCC = 0x1;
var SSD1306_SWITCHCAPVCC = 0x2;

var fnt = new Buffer([
   0x00,0x00,0x00,0x00,0x00,0x00,  // ASCII -  32 20 ' '
   0x00,0x00,0x2f,0x00,0x00,0x00,  // ASCII -  33 21 '!'
   0x00,0x07,0x00,0x07,0x00,0x00,  // ASCII -  34 22 '"'
   0x14,0x7f,0x14,0x7f,0x14,0x00,  // ASCII -  35 23 '#'
   0x24,0x2a,0x6b,0x2a,0x12,0x00,  // ASCII -  36 24 '$'
   0x23,0x13,0x08,0x64,0x62,0x00,  // ASCII -  37 25 '%'
   0x36,0x49,0x55,0x22,0x50,0x00,  // ASCII -  38 26 '&'
   0x00,0x05,0x03,0x00,0x00,0x00,  // ASCII -  39 27 '''
   0x00,0x1c,0x22,0x41,0x00,0x00,  // ASCII -  40 28 '('
   0x00,0x41,0x22,0x1c,0x00,0x00,  // ASCII -  41 29 ')'
   0x14,0x08,0x3e,0x08,0x14,0x00,  // ASCII -  42 2a '*'
   0x08,0x08,0x3e,0x08,0x08,0x00,  // ASCII -  43 2b '+'
   0x00,0x50,0x30,0x00,0x00,0x00,  // ASCII -  44 2c ','
   0x08,0x08,0x08,0x08,0x08,0x00,  // ASCII -  45 2d '-'
   0x00,0x60,0x60,0x00,0x00,0x00,  // ASCII -  46 2e '.'
   0x20,0x10,0x08,0x04,0x02,0x00,  // ASCII -  47 2f '/'
   0x3e,0x51,0x49,0x45,0x3e,0x00,  // ASCII -  48 30 '0'
   0x00,0x42,0x7f,0x40,0x00,0x00,  // ASCII -  49 31 '1'
   0x42,0x61,0x51,0x49,0x46,0x00,  // ASCII -  50 32 '2'
   0x21,0x41,0x45,0x4b,0x31,0x00,  // ASCII -  51 33 '3'
   0x18,0x14,0x12,0x7f,0x10,0x00,  // ASCII -  52 34 '4'
   0x27,0x45,0x45,0x45,0x39,0x00,  // ASCII -  53 35 '5'
   0x3c,0x4a,0x49,0x49,0x30,0x00,  // ASCII -  54 36 '6'
   0x03,0x01,0x71,0x09,0x07,0x00,  // ASCII -  55 37 '7'
   0x36,0x49,0x49,0x49,0x36,0x00,  // ASCII -  56 38 '8'
   0x06,0x49,0x49,0x29,0x1e,0x00,  // ASCII -  57 39 '9'
   0x00,0x36,0x36,0x00,0x00,0x00,  // ASCII -  58 3a ':'
   0x00,0x56,0x36,0x00,0x00,0x00,  // ASCII -  59 3b ';'
   0x08,0x14,0x22,0x41,0x00,0x00,  // ASCII -  60 3c '<'
   0x14,0x14,0x14,0x14,0x14,0x00,  // ASCII -  61 3d '='
   0x00,0x41,0x22,0x14,0x08,0x00,  // ASCII -  62 3e '>'
   0x02,0x01,0x51,0x09,0x06,0x00,  // ASCII -  63 3f '?'
   0x32,0x49,0x79,0x41,0x3e,0x00,  // ASCII -  64 40 '@'
   0x7e,0x11,0x11,0x11,0x7e,0x00,  // ASCII -  65 41 'A'
   0x7f,0x49,0x49,0x49,0x36,0x00,  // ASCII -  66 42 'B'
   0x3e,0x41,0x41,0x41,0x22,0x00,  // ASCII -  67 43 'C'
   0x7f,0x41,0x41,0x22,0x1c,0x00,  // ASCII -  68 44 'D'
   0x7f,0x49,0x49,0x49,0x41,0x00,  // ASCII -  69 45 'E'
   0x7f,0x09,0x09,0x09,0x01,0x00,  // ASCII -  70 46 'F'
   0x3e,0x41,0x49,0x49,0x7a,0x00,  // ASCII -  71 47 'G'
   0x7f,0x08,0x08,0x08,0x7f,0x00,  // ASCII -  72 48 'H'
   0x00,0x41,0x7f,0x41,0x00,0x00,  // ASCII -  73 49 'I'
   0x20,0x40,0x41,0x3f,0x01,0x00,  // ASCII -  74 4a 'J'
   0x7f,0x08,0x14,0x22,0x41,0x00,  // ASCII -  75 4b 'K'
   0x7f,0x40,0x40,0x40,0x40,0x00,  // ASCII -  76 4c 'L'
   0x7f,0x02,0x0c,0x02,0x7f,0x00,  // ASCII -  77 4d 'M'
   0x7f,0x04,0x08,0x10,0x7f,0x00,  // ASCII -  78 4e 'N'
   0x3e,0x41,0x41,0x41,0x3e,0x00,  // ASCII -  79 4f 'O'
   0x7f,0x09,0x09,0x09,0x06,0x00,  // ASCII -  80 50 'P'
   0x3e,0x41,0x51,0x21,0x5e,0x00,  // ASCII -  81 51 'Q'
   0x7f,0x09,0x19,0x29,0x46,0x00,  // ASCII -  82 52 'R'
   0x46,0x49,0x49,0x49,0x31,0x00,  // ASCII -  83 53 'S'
   0x01,0x01,0x7f,0x01,0x01,0x00,  // ASCII -  84 54 'T'
   0x3f,0x40,0x40,0x40,0x3f,0x00,  // ASCII -  85 55 'U'
   0x1f,0x20,0x40,0x20,0x1f,0x00,  // ASCII -  86 56 'V'
   0x3f,0x40,0x38,0x40,0x3f,0x00,  // ASCII -  87 57 'W'
   0x63,0x14,0x08,0x14,0x63,0x00,  // ASCII -  88 58 'X'
   0x07,0x08,0x70,0x08,0x07,0x00,  // ASCII -  89 59 'Y'
   0x61,0x51,0x49,0x45,0x43,0x00,  // ASCII -  90 5a 'Z'
   0x7f,0x41,0x41,0x00,0x00,0x00,  // ASCII -  91 5b '['
   0x02,0x04,0x08,0x10,0x20,0x00,  // ASCII -  92 5c '\'
   0x00,0x41,0x41,0x7f,0x00,0x00,  // ASCII -  93 5d ']'
   0x04,0x02,0x01,0x02,0x04,0x00,  // ASCII -  94 5e '^'
   0x40,0x40,0x40,0x40,0x40,0x00,  // ASCII -  95 5f '_'
   0x00,0x01,0x02,0x04,0x00,0x00,  // ASCII -  96 60 '`'
   0x20,0x54,0x54,0x54,0x78,0x00,  // ASCII -  97 61 'a'
   0x7f,0x48,0x44,0x44,0x38,0x00,  // ASCII -  98 62 'b'
   0x38,0x44,0x44,0x44,0x20,0x00,  // ASCII -  99 63 'c'
   0x38,0x44,0x44,0x48,0x7f,0x00,  // ASCII - 100 64 'd'
   0x38,0x54,0x54,0x54,0x18,0x00,  // ASCII - 101 65 'e'
   0x08,0x7e,0x09,0x01,0x02,0x00,  // ASCII - 102 66 'f'
   0x0c,0x52,0x52,0x52,0x3e,0x00,  // ASCII - 103 67 'g'
   0x7f,0x08,0x04,0x04,0x78,0x00,  // ASCII - 104 68 'h'
   0x00,0x44,0x7d,0x40,0x00,0x00,  // ASCII - 105 69 'i'
   0x20,0x40,0x44,0x3d,0x00,0x00,  // ASCII - 106 6a 'j'
   0x7f,0x10,0x28,0x44,0x00,0x00,  // ASCII - 107 6b 'k'
   0x00,0x41,0x7f,0x40,0x00,0x00,  // ASCII - 108 6c 'l'
   0x7c,0x04,0x18,0x04,0x78,0x00,  // ASCII - 109 6d 'm'
   0x7c,0x08,0x04,0x04,0x78,0x00,  // ASCII - 110 6e 'n'
   0x38,0x44,0x44,0x44,0x38,0x00,  // ASCII - 111 6f 'o'
   0x7c,0x14,0x14,0x14,0x08,0x00,  // ASCII - 112 70 'p'
   0x08,0x14,0x14,0x18,0x7c,0x00,  // ASCII - 113 71 'q'
   0x7c,0x08,0x04,0x04,0x08,0x00,  // ASCII - 114 72 'r'
   0x48,0x54,0x54,0x54,0x20,0x00,  // ASCII - 115 73 's'
   0x04,0x3f,0x44,0x40,0x20,0x00,  // ASCII - 116 74 't'
   0x3c,0x40,0x40,0x20,0x7c,0x00,  // ASCII - 117 75 'u'
   0x1c,0x20,0x40,0x20,0x1c,0x00,  // ASCII - 118 76 'v'
   0x3c,0x40,0x38,0x40,0x3c,0x00,  // ASCII - 119 77 'w'
   0x44,0x28,0x10,0x28,0x44,0x00,  // ASCII - 120 78 'x'
   0x0c,0x50,0x50,0x50,0x3c,0x00,  // ASCII - 121 79 'y'
   0x44,0x64,0x54,0x4c,0x44,0x00,  // ASCII - 122 7a 'z'
   0x00,0x08,0x36,0x41,0x00,0x00,  // ASCII - 123 7b '{'
   0x00,0x00,0x7f,0x00,0x00,0x00,  // ASCII - 124 7c '|'
   0x00,0x41,0x36,0x08,0x00,0x00,  // ASCII - 125 7d '}'
   0x08,0x08,0x2a,0x1c,0x08,0x00,  // ASCII - 126 7e ->
   0x08,0x1c,0x2a,0x08,0x08,0x00 // ASCII - 127 7f <-
]);
/*
var buffer = new Buffer([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x80, 0x80, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xF8, 0xE0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80,
0x80, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0xFF,
0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00,
0x80, 0xFF, 0xFF, 0x80, 0x80, 0x00, 0x80, 0x80, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x80, 0x80,
0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x8C, 0x8E, 0x84, 0x00, 0x00, 0x80, 0xF8,
0xF8, 0xF8, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0xE0, 0xC0, 0x80,
0x00, 0xE0, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xC7, 0x01, 0x01,
0x01, 0x01, 0x83, 0xFF, 0xFF, 0x00, 0x00, 0x7C, 0xFE, 0xC7, 0x01, 0x01, 0x01, 0x01, 0x83, 0xFF,
0xFF, 0xFF, 0x00, 0x38, 0xFE, 0xC7, 0x83, 0x01, 0x01, 0x01, 0x83, 0xC7, 0xFF, 0xFF, 0x00, 0x00,
0x01, 0xFF, 0xFF, 0x01, 0x01, 0x00, 0xFF, 0xFF, 0x07, 0x01, 0x01, 0x01, 0x00, 0x00, 0x7F, 0xFF,
0x80, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0xFF,
0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x03, 0x0F, 0x3F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xC7, 0xC7, 0x8F,
0x8F, 0x9F, 0xBF, 0xFF, 0xFF, 0xC3, 0xC0, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFC, 0xFC,
0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 0xF8, 0xF0, 0xF0, 0xE0, 0xC0, 0x00, 0x01, 0x03, 0x03, 0x03,
0x03, 0x03, 0x01, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01,
0x03, 0x01, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x03, 0x03, 0x00, 0x00,
0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x03,
0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x1F, 0x0F,
0x87, 0xC7, 0xF7, 0xFF, 0xFF, 0x1F, 0x1F, 0x3D, 0xFC, 0xF8, 0xF8, 0xF8, 0xF8, 0x7C, 0x7D, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x0F, 0x07, 0x00, 0x30, 0x30, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xC0, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0xC0, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0x3F, 0x1F,
0x0F, 0x07, 0x1F, 0x7F, 0xFF, 0xFF, 0xF8, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xF8, 0xE0,
0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0x00, 0x00,
0x00, 0xFC, 0xFE, 0xFC, 0x0C, 0x06, 0x06, 0x0E, 0xFC, 0xF8, 0x00, 0x00, 0xF0, 0xF8, 0x1C, 0x0E,
0x06, 0x06, 0x06, 0x0C, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 0xFC,
0xFE, 0xFC, 0x00, 0x18, 0x3C, 0x7E, 0x66, 0xE6, 0xCE, 0x84, 0x00, 0x00, 0x06, 0xFF, 0xFF, 0x06,
0x06, 0xFC, 0xFE, 0xFC, 0x0C, 0x06, 0x06, 0x06, 0x00, 0x00, 0xFE, 0xFE, 0x00, 0x00, 0xC0, 0xF8,
0xFC, 0x4E, 0x46, 0x46, 0x46, 0x4E, 0x7C, 0x78, 0x40, 0x18, 0x3C, 0x76, 0xE6, 0xCE, 0xCC, 0x80,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0F, 0x1F, 0x1F, 0x3F, 0x3F, 0x3F, 0x3F, 0x1F, 0x0F, 0x03,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00,
0x00, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x03, 0x07, 0x0E, 0x0C,
0x18, 0x18, 0x0C, 0x06, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x01, 0x0F, 0x0E, 0x0C, 0x18, 0x0C, 0x0F,
0x07, 0x01, 0x00, 0x04, 0x0E, 0x0C, 0x18, 0x0C, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00,
0x00, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x07,
0x07, 0x0C, 0x0C, 0x18, 0x1C, 0x0C, 0x06, 0x06, 0x00, 0x04, 0x0E, 0x0C, 0x18, 0x0C, 0x0F, 0x07,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x000]);
*/
function Screen(hardware, options, callback) {
  this.hardware = hardware;

  if (arguments.length === 2) {
      if (typeof options === 'function') {
          callback = options;
          options = null;
      }
    }
  this.options = options || {};
  this.callback = callback;

  this.i2c = new this.hardware.I2C(this.options.slaveAddr || 0x3c);
  this._init();
  // this.test3();
  this.rawText("Hello World!");
  // this.flood();
  // this.test2();
  // this.invert(true);
  // this.brightness(0x44);
}

util.inherits(Screen, EventEmitter);

Screen.prototype = {

  test: function() {
   this.ssd1306_command(0x21); // columns
   this.ssd1306_command(0);
   this.ssd1306_command(127);
   this.ssd1306_command(0x22); // rows
   this.ssd1306_command(0);
   this.ssd1306_command(7);

    this.i2c.send(buffer, function(err) {
      if (err) console.log("failed");
    });
  },

  test2: function() {
   this.ssd1306_command(0x21); // columns
   this.ssd1306_command(0);
   this.ssd1306_command(127);
   this.ssd1306_command(0x22); // rows
   this.ssd1306_command(0);
   this.ssd1306_command(7);

    this.i2c.send(fnt, function(err) {
      if (err) console.log("failed");
    });
  },

  test3: function() {
    this._sendData(fnt);
  },

  _init: function() {
    this.ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
    this.ssd1306_command(0x2E);                                  // 0xAE
    this.ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
    this.ssd1306_command(0x80);                                  // the suggested ratio 0x80
    this.ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
    this.ssd1306_command(0x3F);
    this.ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
    this.ssd1306_command(0x0);                                   // no offset
    this.ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
    this.ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
    this.ssd1306_command(0x14);
    this.ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
    this.ssd1306_command(0x00);                                  // 0x0 act like ks0108
    this.ssd1306_command(SSD1306_SEGREMAP | 0x1);
    this.ssd1306_command(SSD1306_COMSCANDEC);
    this.ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
    this.ssd1306_command(0x12);
    this.ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
    this.ssd1306_command(0x9F); 
    this.ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
    this.ssd1306_command(0xF1);
    this.ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
    this.ssd1306_command(0x40);
    this.ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    this.ssd1306_command(SSD1306_NORMALDISPLAY);
    this.ssd1306_command(SSD1306_DISPLAYON);
  },
  _sendCommand: function(comm) {
    var b = new Buffer([0x80,comm]);
    // console.log(b);
    this.i2c.send(b, function(err) { 
      if (err) { console.log("Error"); }
    });
  },
  _sendData: function(data) {
   this.ssd1306_command(0x21); // columns
   this.ssd1306_command(0);
   this.ssd1306_command(127);
   this.ssd1306_command(0x22); // rows
   this.ssd1306_command(0);
   this.ssd1306_command(7);
    var b = new Buffer([0x40]);
    this.i2c.send(Buffer.concat([b, data]), function(err) {
      if (err) { console.log("Error sending data"); }
    });
  },
  ssd1306_command: function(c) {
    this._sendCommand(c);
  },
  invert: function(bool) {
    if (bool) {
      this.ssd1306_command(SSD1306_INVERTDISPLAY);
    } else {
      this.ssd1306_command(SSD1306_NORMALDISPLAY);
    }
  },
  flood:function() {
    this.ssd1306_command(SSD1306_DISPLAYALLON);
  },
  clear: function() {
    var b = new Buffer(128*64/8);
    b.fill(0x00);
    this._sendData(b);
  },
  brightness:function(brightness) {
    this.ssd1306_command(SSD1306_SETCONTRAST);
    this.ssd1306_command(brightness || 0xFF);
  },
  rawText:function(input) {
    var b = new Buffer(128*64/8);
    input.split("").map(function(c, i) {
      var cd = c.charCodeAt(0)-32;
      fnt.copy(b, i*6, cd*6, cd*6+6); 
    });
    this._sendData(b);
  }
};

function use(hardware, options, callback) {
  return new Screen(hardware, options, callback);
}

module.exports.Screen = Screen;
module.exports.use = use;
//DEV ONLY
var tessel = require('tessel');
var oled = use(tessel.port['A']);